// <auto-generated />
using System;
using GoldAggregator.Parser.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GoldAggregator.Parser.DbContext.Migrations
{
    [DbContext(typeof(ParserDbContext))]
    [Migration("20220520201511_AddTranlitToCoinCatalog")]
    partial class AddTranlitToCoinCatalog
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GoldAggregator.Parser.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Alias = "moskva",
                            Name = "Москва"
                        },
                        new
                        {
                            Id = 2,
                            Alias = "sankt-peterburg",
                            Name = "Санкт-Петербург"
                        },
                        new
                        {
                            Id = 3,
                            Alias = "nizhnij-novgorod",
                            Name = "Нижний Новгород"
                        },
                        new
                        {
                            Id = 4,
                            Alias = "kazan",
                            Name = "Казань"
                        },
                        new
                        {
                            Id = 5,
                            Alias = "surgut",
                            Name = "Сургут"
                        },
                        new
                        {
                            Id = 6,
                            Alias = "sevastopol",
                            Name = "Севастополь"
                        });
                });

            modelBuilder.Entity("GoldAggregator.Parser.Entities.CoinCatalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("EndMiningYear")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MetalType")
                        .HasColumnType("integer");

                    b.Property<int>("MintCountryId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Nomination")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartMiningYear")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TranslitName")
                        .HasColumnType("text");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("MintCountryId");

                    b.ToTable("CoinCatalogs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MetalType = 1,
                            MintCountryId = 22,
                            Name = "Георгий Победоносец",
                            Nomination = "200 рублей",
                            TranslitName = "georgij-pobedonosec",
                            Weight = 31.100000000000001
                        },
                        new
                        {
                            Id = 2,
                            MetalType = 1,
                            MintCountryId = 27,
                            Name = "Американский Буффало",
                            TranslitName = "amerikanskij-buffalo",
                            Weight = 31.100000000000001
                        },
                        new
                        {
                            Id = 3,
                            MetalType = 1,
                            MintCountryId = 2,
                            Name = "Венский Филармоникер",
                            TranslitName = "venskij-filarmoniker",
                            Weight = 31.100000000000001
                        },
                        new
                        {
                            Id = 4,
                            MetalType = 1,
                            MintCountryId = 1,
                            Name = "Австраллийский Кенгуру",
                            TranslitName = "avstrallijskij-kenguru",
                            Weight = 31.100000000000001
                        },
                        new
                        {
                            Id = 5,
                            MetalType = 1,
                            MintCountryId = 9,
                            Name = "Кленовый лист",
                            TranslitName = "klenovyj-list",
                            Weight = 31.100000000000001
                        },
                        new
                        {
                            Id = 6,
                            MetalType = 1,
                            MintCountryId = 27,
                            Name = "Американский Орел",
                            TranslitName = "amerikanskij-orel",
                            Weight = 31.100000000000001
                        },
                        new
                        {
                            Id = 7,
                            MetalType = 1,
                            MintCountryId = 5,
                            Name = "Британия",
                            TranslitName = "britaniya",
                            Weight = 31.100000000000001
                        },
                        new
                        {
                            Id = 8,
                            MetalType = 1,
                            MintCountryId = 34,
                            Name = "Крюгерранд",
                            TranslitName = "kryugerrand",
                            Weight = 31.100000000000001
                        },
                        new
                        {
                            Id = 9,
                            MetalType = 1,
                            MintCountryId = 1,
                            Name = "Австраллийский Лунар",
                            TranslitName = "avstrallijskij-lunar",
                            Weight = 31.100000000000001
                        },
                        new
                        {
                            Id = 10,
                            MetalType = 1,
                            MintCountryId = 10,
                            Name = "Панда",
                            TranslitName = "panda",
                            Weight = 31.100000000000001
                        },
                        new
                        {
                            Id = 11,
                            MetalType = 1,
                            MintCountryId = 22,
                            Name = "Георгий Победоносец",
                            TranslitName = "georgij-pobedonosec",
                            Weight = 15.550000000000001
                        },
                        new
                        {
                            Id = 12,
                            MetalType = 1,
                            MintCountryId = 27,
                            Name = "Американский Буффало",
                            TranslitName = "amerikanskij-buffalo",
                            Weight = 15.550000000000001
                        },
                        new
                        {
                            Id = 13,
                            MetalType = 1,
                            MintCountryId = 2,
                            Name = "Венский Филармоникер",
                            TranslitName = "venskij-filarmoniker",
                            Weight = 15.550000000000001
                        },
                        new
                        {
                            Id = 14,
                            MetalType = 1,
                            MintCountryId = 1,
                            Name = "Австраллийский Кенгуру",
                            TranslitName = "avstrallijskij-kenguru",
                            Weight = 15.550000000000001
                        },
                        new
                        {
                            Id = 15,
                            MetalType = 1,
                            MintCountryId = 9,
                            Name = "Кленовый лист",
                            TranslitName = "klenovyj-list",
                            Weight = 15.550000000000001
                        },
                        new
                        {
                            Id = 16,
                            MetalType = 1,
                            MintCountryId = 27,
                            Name = "Американский Орел",
                            TranslitName = "amerikanskij-orel",
                            Weight = 15.550000000000001
                        },
                        new
                        {
                            Id = 17,
                            MetalType = 1,
                            MintCountryId = 5,
                            Name = "Британия",
                            TranslitName = "britaniya",
                            Weight = 15.550000000000001
                        },
                        new
                        {
                            Id = 18,
                            MetalType = 1,
                            MintCountryId = 34,
                            Name = "Крюгерранд",
                            TranslitName = "kryugerrand",
                            Weight = 15.550000000000001
                        },
                        new
                        {
                            Id = 19,
                            MetalType = 1,
                            MintCountryId = 1,
                            Name = "Австраллийский Лунар",
                            TranslitName = "avstrallijskij-lunar",
                            Weight = 15.550000000000001
                        },
                        new
                        {
                            Id = 20,
                            MetalType = 1,
                            MintCountryId = 10,
                            Name = "Панда",
                            TranslitName = "panda",
                            Weight = 15.550000000000001
                        },
                        new
                        {
                            Id = 21,
                            MetalType = 1,
                            MintCountryId = 22,
                            Name = "Георгий Победоносец",
                            TranslitName = "georgij-pobedonosec",
                            Weight = 7.7800000000000002
                        },
                        new
                        {
                            Id = 22,
                            MetalType = 1,
                            MintCountryId = 27,
                            Name = "Американский Буффало",
                            TranslitName = "amerikanskij-buffalo",
                            Weight = 7.7800000000000002
                        },
                        new
                        {
                            Id = 23,
                            MetalType = 1,
                            MintCountryId = 2,
                            Name = "Венский Филармоникер",
                            TranslitName = "venskij-filarmoniker",
                            Weight = 7.7800000000000002
                        },
                        new
                        {
                            Id = 24,
                            MetalType = 1,
                            MintCountryId = 1,
                            Name = "Австраллийский Кенгуру",
                            TranslitName = "avstrallijskij-kenguru",
                            Weight = 7.7800000000000002
                        },
                        new
                        {
                            Id = 25,
                            MetalType = 1,
                            MintCountryId = 9,
                            Name = "Кленовый лист",
                            TranslitName = "klenovyj-list",
                            Weight = 7.7800000000000002
                        },
                        new
                        {
                            Id = 26,
                            MetalType = 1,
                            MintCountryId = 27,
                            Name = "Американский Орел",
                            TranslitName = "amerikanskij-orel",
                            Weight = 7.7800000000000002
                        },
                        new
                        {
                            Id = 27,
                            MetalType = 1,
                            MintCountryId = 5,
                            Name = "Британия",
                            TranslitName = "britaniya",
                            Weight = 7.7800000000000002
                        },
                        new
                        {
                            Id = 28,
                            MetalType = 1,
                            MintCountryId = 34,
                            Name = "Крюгерранд",
                            TranslitName = "kryugerrand",
                            Weight = 7.7800000000000002
                        },
                        new
                        {
                            Id = 29,
                            MetalType = 1,
                            MintCountryId = 1,
                            Name = "Австраллийский Лунар",
                            TranslitName = "avstrallijskij-lunar",
                            Weight = 7.7800000000000002
                        },
                        new
                        {
                            Id = 30,
                            MetalType = 1,
                            MintCountryId = 10,
                            Name = "Панда",
                            TranslitName = "panda",
                            Weight = 7.7800000000000002
                        },
                        new
                        {
                            Id = 41,
                            MetalType = 1,
                            MintCountryId = 22,
                            Name = "Георгий Победоносец",
                            TranslitName = "georgij-pobedonosec",
                            Weight = 3.1099999999999999
                        },
                        new
                        {
                            Id = 42,
                            MetalType = 1,
                            MintCountryId = 27,
                            Name = "Американский Буффало",
                            TranslitName = "amerikanskij-buffalo",
                            Weight = 3.1099999999999999
                        },
                        new
                        {
                            Id = 43,
                            MetalType = 1,
                            MintCountryId = 2,
                            Name = "Венский Филармоникер",
                            TranslitName = "venskij-filarmoniker",
                            Weight = 3.1099999999999999
                        },
                        new
                        {
                            Id = 44,
                            MetalType = 1,
                            MintCountryId = 1,
                            Name = "Австраллийский Кенгуру",
                            TranslitName = "avstrallijskij-kenguru",
                            Weight = 3.1099999999999999
                        },
                        new
                        {
                            Id = 45,
                            MetalType = 1,
                            MintCountryId = 9,
                            Name = "Кленовый лист",
                            TranslitName = "klenovyj-list",
                            Weight = 3.1099999999999999
                        },
                        new
                        {
                            Id = 46,
                            MetalType = 1,
                            MintCountryId = 27,
                            Name = "Американский Орел",
                            TranslitName = "amerikanskij-orel",
                            Weight = 3.1099999999999999
                        },
                        new
                        {
                            Id = 47,
                            MetalType = 1,
                            MintCountryId = 5,
                            Name = "Британия",
                            TranslitName = "britaniya",
                            Weight = 3.1099999999999999
                        },
                        new
                        {
                            Id = 48,
                            MetalType = 1,
                            MintCountryId = 34,
                            Name = "Крюгерранд",
                            TranslitName = "kryugerrand",
                            Weight = 3.1099999999999999
                        },
                        new
                        {
                            Id = 49,
                            MetalType = 1,
                            MintCountryId = 1,
                            Name = "Австраллийский Лунар",
                            TranslitName = "avstrallijskij-lunar",
                            Weight = 3.1099999999999999
                        },
                        new
                        {
                            Id = 50,
                            MetalType = 1,
                            MintCountryId = 10,
                            Name = "Панда",
                            TranslitName = "panda",
                            Weight = 3.1099999999999999
                        },
                        new
                        {
                            Id = 51,
                            MetalType = 2,
                            MintCountryId = 22,
                            Name = "Георгий Победоносец",
                            TranslitName = "georgij-pobedonosec",
                            Weight = 31.100000000000001
                        },
                        new
                        {
                            Id = 52,
                            MetalType = 2,
                            MintCountryId = 27,
                            Name = "Американский Буффало",
                            TranslitName = "amerikanskij-buffalo",
                            Weight = 31.100000000000001
                        },
                        new
                        {
                            Id = 53,
                            MetalType = 2,
                            MintCountryId = 2,
                            Name = "Венский Филармоникер",
                            TranslitName = "venskij-filarmoniker",
                            Weight = 31.100000000000001
                        },
                        new
                        {
                            Id = 54,
                            MetalType = 2,
                            MintCountryId = 1,
                            Name = "Австраллийский Кенгуру",
                            TranslitName = "avstrallijskij-kenguru",
                            Weight = 31.100000000000001
                        },
                        new
                        {
                            Id = 55,
                            MetalType = 2,
                            MintCountryId = 9,
                            Name = "Кленовый лист",
                            TranslitName = "klenovyj-list",
                            Weight = 31.100000000000001
                        },
                        new
                        {
                            Id = 56,
                            MetalType = 2,
                            MintCountryId = 27,
                            Name = "Американский Орел",
                            TranslitName = "amerikanskij-orel",
                            Weight = 31.100000000000001
                        },
                        new
                        {
                            Id = 57,
                            MetalType = 2,
                            MintCountryId = 5,
                            Name = "Британия",
                            TranslitName = "britaniya",
                            Weight = 31.100000000000001
                        },
                        new
                        {
                            Id = 58,
                            MetalType = 2,
                            MintCountryId = 34,
                            Name = "Крюгерранд",
                            TranslitName = "kryugerrand",
                            Weight = 31.100000000000001
                        },
                        new
                        {
                            Id = 59,
                            MetalType = 2,
                            MintCountryId = 1,
                            Name = "Австраллийский Лунар",
                            TranslitName = "avstrallijskij-lunar",
                            Weight = 31.100000000000001
                        },
                        new
                        {
                            Id = 60,
                            MetalType = 2,
                            MintCountryId = 10,
                            Name = "Панда",
                            TranslitName = "panda",
                            Weight = 31.109999999999999
                        },
                        new
                        {
                            Id = 61,
                            MetalType = 3,
                            MintCountryId = 2,
                            Name = "Венский Филармоникер",
                            TranslitName = "venskij-filarmoniker",
                            Weight = 31.100000000000001
                        },
                        new
                        {
                            Id = 62,
                            MetalType = 3,
                            MintCountryId = 1,
                            Name = "Австраллийский Кенгуру",
                            TranslitName = "avstrallijskij-kenguru",
                            Weight = 31.100000000000001
                        },
                        new
                        {
                            Id = 63,
                            MetalType = 3,
                            MintCountryId = 9,
                            Name = "Кленовый лист",
                            TranslitName = "klenovyj-list",
                            Weight = 31.100000000000001
                        },
                        new
                        {
                            Id = 64,
                            MetalType = 3,
                            MintCountryId = 27,
                            Name = "Американский Орел",
                            TranslitName = "amerikanskij-orel",
                            Weight = 31.100000000000001
                        },
                        new
                        {
                            Id = 65,
                            MetalType = 3,
                            MintCountryId = 5,
                            Name = "Британия",
                            TranslitName = "britaniya",
                            Weight = 31.100000000000001
                        },
                        new
                        {
                            Id = 66,
                            MetalType = 3,
                            MintCountryId = 1,
                            Name = "Утконос",
                            TranslitName = "utkonos",
                            Weight = 31.100000000000001
                        },
                        new
                        {
                            Id = 67,
                            MetalType = 3,
                            MintCountryId = 5,
                            Name = "Королевский Герб",
                            TranslitName = "korolevskij-gerb",
                            Weight = 31.100000000000001
                        },
                        new
                        {
                            Id = 68,
                            MetalType = 3,
                            MintCountryId = 5,
                            Name = "Белая лошадь Ганновера",
                            TranslitName = "belaya-loshad-gannovera",
                            Weight = 31.100000000000001
                        },
                        new
                        {
                            Id = 69,
                            MetalType = 3,
                            MintCountryId = 5,
                            Name = "Белый Грейхаунд Ричмонда",
                            TranslitName = "belyj-grejxaund-richmonda",
                            Weight = 31.100000000000001
                        },
                        new
                        {
                            Id = 70,
                            MetalType = 3,
                            MintCountryId = 5,
                            Name = "Звери королевы",
                            TranslitName = "zveri-korolevy",
                            Weight = 31.100000000000001
                        },
                        new
                        {
                            Id = 71,
                            MetalType = 3,
                            MintCountryId = 5,
                            Name = "Белый лев Мортимера",
                            TranslitName = "belyj-lev-mortimera",
                            Weight = 31.100000000000001
                        },
                        new
                        {
                            Id = 72,
                            MetalType = 3,
                            MintCountryId = 5,
                            Name = "Королевский Единорог",
                            TranslitName = "korolevskij-edinorog",
                            Weight = 31.100000000000001
                        },
                        new
                        {
                            Id = 73,
                            MetalType = 3,
                            MintCountryId = 28,
                            Name = "Олимпийские игры",
                            TranslitName = "olimpijskie-igry",
                            Weight = 15.550000000000001
                        });
                });

            modelBuilder.Entity("GoldAggregator.Parser.Entities.CoinHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CityId")
                        .HasColumnType("integer");

                    b.Property<int?>("CoinFromCatalogId")
                        .HasColumnType("integer");

                    b.Property<int>("DealerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ParseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("PriceSpecial")
                        .HasColumnType("double precision");

                    b.Property<double>("PriceToBuy")
                        .HasColumnType("double precision");

                    b.Property<double>("PriceToSell")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CoinFromCatalogId");

                    b.HasIndex("DealerId");

                    b.ToTable("CoinsHistory");
                });

            modelBuilder.Entity("GoldAggregator.Parser.Entities.CoinPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CityId")
                        .HasColumnType("integer");

                    b.Property<int?>("CoinFromCatalogId")
                        .HasColumnType("integer");

                    b.Property<int>("DealerId")
                        .HasColumnType("integer");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<DateTime>("ParseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("PriceSpecial")
                        .HasColumnType("double precision");

                    b.Property<double>("PriceToBuy")
                        .HasColumnType("double precision");

                    b.Property<double>("PriceToSell")
                        .HasColumnType("double precision");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CoinFromCatalogId");

                    b.HasIndex("DealerId");

                    b.ToTable("CoinPrices");
                });

            modelBuilder.Entity("GoldAggregator.Parser.Entities.Dealer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BaseUrl")
                        .HasColumnType("text");

                    b.Property<int>("DealerType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ProviderName")
                        .HasColumnType("text");

                    b.Property<int>("UrlInfoId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UrlInfoId");

                    b.ToTable("Dealers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BaseUrl = "https://zoloto-md.ru",
                            DealerType = 4,
                            Name = "ZolotoMD",
                            ProviderName = "ZolotoMdRuProvider",
                            UrlInfoId = 1
                        },
                        new
                        {
                            Id = 2,
                            BaseUrl = "https://monetainvest.ru/",
                            DealerType = 4,
                            Name = "MonetaInvest",
                            ProviderName = "MonetaInvestProvider",
                            UrlInfoId = 2
                        },
                        new
                        {
                            Id = 3,
                            BaseUrl = "http://zoloto-piter.ru/",
                            DealerType = 4,
                            Name = "ZolotoPiterRu",
                            ProviderName = "ZolotoPiterRuProvider",
                            UrlInfoId = 3
                        });
                });

            modelBuilder.Entity("GoldAggregator.Parser.Entities.DealerCoinMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CoinFromCatalogId")
                        .HasColumnType("integer");

                    b.Property<int>("DealerId")
                        .HasColumnType("integer");

                    b.Property<string>("MatchedName")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CoinFromCatalogId");

                    b.HasIndex("DealerId");

                    b.ToTable("DillerCoinMaps");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CoinFromCatalogId = 3,
                            DealerId = 1,
                            MatchedName = "Золотая инвестиционная монета Австрии Венский Филармоникер, 31,1 гр чистого золота (проба 0,9999)",
                            Url = "https://zoloto-md.ru/bullion-coins/i-inostrannyye/zolotaya-investiczionnaya-moneta-avstrijskij-filarmoniker"
                        },
                        new
                        {
                            Id = 2,
                            CoinFromCatalogId = 5,
                            DealerId = 1,
                            MatchedName = "Золотая монета Канады \"Кленовый Лист\", 31.1 г чистого золота (проба 0.9999)",
                            Url = "https://zoloto-md.ru/bullion-coins/i-inostrannyye/zolotaya-moneta-kanadyi-klenovyij-list,-31.1-g-chistogo-zolota-proba-0.9999"
                        },
                        new
                        {
                            Id = 3,
                            CoinFromCatalogId = 1,
                            DealerId = 1,
                            MatchedName = "Золотая инвестиционная монета Георгий ПОБЕДОНОСЕЦ СПМД 2006 - 2012 г.в., вес чистого золота - 7.78 г (проба 0,999)",
                            Url = "https://zoloto-md.ru/bullion-coins/i-rossiya-i-sssr/zolotaya-investiczionnaya-moneta-georgij-pobedonosecz-spmd"
                        },
                        new
                        {
                            Id = 4,
                            CoinFromCatalogId = 1,
                            DealerId = 1,
                            MatchedName = "Золотая инвестиционная монета Георгий Победоносец СПМД 2018-2022 г.в., 7.78 г чистого золота (проба 0,999)",
                            Url = "https://zoloto-md.ru/bullion-coins/i-rossiya-i-sssr/zolotaya-investiczionnaya-moneta-georgij-pobedonosecz-mmd,-7,78-g-chistogo-zolota-proba-0,999"
                        },
                        new
                        {
                            Id = 5,
                            CoinFromCatalogId = 4,
                            DealerId = 1,
                            MatchedName = "Золотая инвестиционная монета Австралии - Кенгуру 2022 г.в., 31.1 г чистого золота (проба 0,9999)",
                            Url = "https://zoloto-md.ru/bullion-coins/i-inostrannyye/zolotaya-investiczionnaya-moneta-avstralii-kenguru-2022-g.v.,-31.1-g-chistogo-zolota-proba-0,9999"
                        });
                });

            modelBuilder.Entity("GoldAggregator.Parser.Entities.MintCountry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MintCountries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Австралия"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Австрия"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Армения"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Беларусь"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Великобритания"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Германия"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Казахстан"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Камерун"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Канада"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Китай"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Конго"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Кыргыстан"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Либерия"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Малави"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Мексика"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Монголия"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Науру"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Ниуэ"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Острова Мэн"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Острова Кука"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Палау"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Россия"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Руанда"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Сент-Китс И Невис"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Соломоновы Острова"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Сомали"
                        },
                        new
                        {
                            Id = 27,
                            Name = "США"
                        },
                        new
                        {
                            Id = 28,
                            Name = "СССР"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Тувалу"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Украина"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Фиджи"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Франция"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Швейцария"
                        },
                        new
                        {
                            Id = 34,
                            Name = "ЮАР"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Южная Корея"
                        });
                });

            modelBuilder.Entity("GoldAggregator.Parser.Entities.Url", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<int>("ExternalId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("StackTrace")
                        .HasColumnType("text");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("UrlInfoId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UrlInfoId");

                    b.HasIndex("Value")
                        .IsUnique();

                    b.ToTable("Urls");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExternalId = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UrlInfoId = 1,
                            Value = "https://zoloto-md.ru"
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExternalId = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UrlInfoId = 2,
                            Value = "https://monetainvest.ru"
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExternalId = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UrlInfoId = 3,
                            Value = "http://zoloto-piter.ru"
                        });
                });

            modelBuilder.Entity("GoldAggregator.Parser.Entities.UrlInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<string>("ProviderName")
                        .HasColumnType("text");

                    b.Property<string>("StackTrace")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProviderName")
                        .IsUnique();

                    b.ToTable("UrlInfos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProviderName = "ZolotoMdRuProvider"
                        },
                        new
                        {
                            Id = 2,
                            ProviderName = "MonetaInvestProvider"
                        },
                        new
                        {
                            Id = 3,
                            ProviderName = "ZolotoPiterRuProvider"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d0c691d4-98dc-4ee6-b9db-633fcc9c238e",
                            ConcurrencyStamp = "829e0cb0-7b54-487f-a45c-f73b71a4a279",
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "25723030-b8e5-4b2a-8c06-5cf170e3443b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9ac88e11-e377-4a49-bef9-ed7767ff6f9d",
                            Email = "admin@mail.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MAIL.RU",
                            NormalizedUserName = "ADMIN@MAIL.RU",
                            PasswordHash = "AQAAAAEAACcQAAAAEA7vpzNBUIMLvB4bdfb8xX5IIsMZ86GfG1In4YX3q8BYyZoFQYSGuVOVWB3XfCdZOA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6FPVSOIY6BCPOQH4BZUCNYIKQ5WB4VRM",
                            TwoFactorEnabled = false,
                            UserName = "admin@mail.ru"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "25723030-b8e5-4b2a-8c06-5cf170e3443b",
                            RoleId = "d0c691d4-98dc-4ee6-b9db-633fcc9c238e"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("GoldAggregator.Parser.Entities.CoinCatalog", b =>
                {
                    b.HasOne("GoldAggregator.Parser.Entities.MintCountry", "MintCountry")
                        .WithMany("CatalogItems")
                        .HasForeignKey("MintCountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MintCountry");
                });

            modelBuilder.Entity("GoldAggregator.Parser.Entities.CoinHistory", b =>
                {
                    b.HasOne("GoldAggregator.Parser.Entities.City", "City")
                        .WithMany("CoinsHistory")
                        .HasForeignKey("CityId");

                    b.HasOne("GoldAggregator.Parser.Entities.CoinCatalog", "CoinCatalog")
                        .WithMany("CoinsHistory")
                        .HasForeignKey("CoinFromCatalogId");

                    b.HasOne("GoldAggregator.Parser.Entities.Dealer", "Dealer")
                        .WithMany("CoinsHistory")
                        .HasForeignKey("DealerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("CoinCatalog");

                    b.Navigation("Dealer");
                });

            modelBuilder.Entity("GoldAggregator.Parser.Entities.CoinPrice", b =>
                {
                    b.HasOne("GoldAggregator.Parser.Entities.City", "City")
                        .WithMany("Coins")
                        .HasForeignKey("CityId");

                    b.HasOne("GoldAggregator.Parser.Entities.CoinCatalog", "CoinCatalog")
                        .WithMany("CoinPrices")
                        .HasForeignKey("CoinFromCatalogId");

                    b.HasOne("GoldAggregator.Parser.Entities.Dealer", "Dealer")
                        .WithMany("CoinPrices")
                        .HasForeignKey("DealerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("CoinCatalog");

                    b.Navigation("Dealer");
                });

            modelBuilder.Entity("GoldAggregator.Parser.Entities.Dealer", b =>
                {
                    b.HasOne("GoldAggregator.Parser.Entities.UrlInfo", "UrlInfo")
                        .WithMany("Dealers")
                        .HasForeignKey("UrlInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UrlInfo");
                });

            modelBuilder.Entity("GoldAggregator.Parser.Entities.DealerCoinMap", b =>
                {
                    b.HasOne("GoldAggregator.Parser.Entities.CoinCatalog", "CoinCatalog")
                        .WithMany("DillerCoinMaps")
                        .HasForeignKey("CoinFromCatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoldAggregator.Parser.Entities.Dealer", "Dealer")
                        .WithMany("DillerCoinMaps")
                        .HasForeignKey("DealerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoinCatalog");

                    b.Navigation("Dealer");
                });

            modelBuilder.Entity("GoldAggregator.Parser.Entities.Url", b =>
                {
                    b.HasOne("GoldAggregator.Parser.Entities.UrlInfo", "UrlInfo")
                        .WithMany("Urls")
                        .HasForeignKey("UrlInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UrlInfo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoldAggregator.Parser.Entities.City", b =>
                {
                    b.Navigation("Coins");

                    b.Navigation("CoinsHistory");
                });

            modelBuilder.Entity("GoldAggregator.Parser.Entities.CoinCatalog", b =>
                {
                    b.Navigation("CoinPrices");

                    b.Navigation("CoinsHistory");

                    b.Navigation("DillerCoinMaps");
                });

            modelBuilder.Entity("GoldAggregator.Parser.Entities.Dealer", b =>
                {
                    b.Navigation("CoinPrices");

                    b.Navigation("CoinsHistory");

                    b.Navigation("DillerCoinMaps");
                });

            modelBuilder.Entity("GoldAggregator.Parser.Entities.MintCountry", b =>
                {
                    b.Navigation("CatalogItems");
                });

            modelBuilder.Entity("GoldAggregator.Parser.Entities.UrlInfo", b =>
                {
                    b.Navigation("Dealers");

                    b.Navigation("Urls");
                });
#pragma warning restore 612, 618
        }
    }
}
